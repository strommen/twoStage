# This is a template nginx config file to set up nginx as a proxy helping
# to implement two-stage loading.
#
# To use this file, replace the following placeholders:
# - ORIGIN_URL: the URL of your existing server.
# - ORIGIN_HOST: (optional) the hostname of your site, if it differs from
#   ORIGIN_URL (these are commented out by default).
# - PROXY_URL: the URL where this proxy is hosted.
# - CACHE_DIR: directory location for the nginx cache files of this site.
# - CACHE_NAME: a name for the cache.
# - SCRIPT_URL: (optional) if you are injecting twoStage.js and its config
#   via the nginx proxy, this is the URL of your script.
# 
# For all "normal" GET/HEAD requests, per-user headers such as Cookie and 
# User-Agent are removed.  Backend responses are cached for 4 hours with no
# regard for the backend response headers.
#
# Requests within the "_" path (presumably from twoStage.js) are proxied
# to the originally-intended path, without modifying any headers.
#
# This file also includes support for injecting a script file in the <head>
# element (but this is commented-out). If you are unable to modify the
# source HTML to add twoStage.js and its configuration, enable this and point
# it at a script with the twoStage implementation and your site's config.
#
# To add this file to your nginx.conf, include it within the "http" context.
# http {

  proxy_cache_path <CACHE_DIR> keys_zone=<CACHE_NAME>:10m;

  server {
    listen 80;
    server_name <PROXY_URL>;
    proxy_cache <CACHE_NAME>;

    location / {
      #proxy_set_header Host <ORIGIN_HOST>;

      # Only GET and HEAD requests should be cached.
      if ($request_method !~ ^(GET|HEAD)$) {
        proxy_pass <ORIGIN_URL>;
      }

      # Strip cookies and user-agent to anonymize the request
      # If your app parses additional request headers on the backend,
      # you'll want to clear them out here as well.
      proxy_set_header Cookie "";
      proxy_set_header User-Agent "";

      # Strip cookies and caching headers from the backend response.
      # We're going to override them.
      proxy_hide_header Set-Cookie;
      proxy_hide_header Cache-Control;
      proxy_hide_header Expires;

      # In addition to stripping these from the response, we need
      # to tell nginx to ignore them internally - otherwise it will
      # never cache responses.
      proxy_ignore_headers Cache-Control Expires Set-Cookie;

      # Tells nginx to store successful responses for 4 hours.
      proxy_cache_valid 200 4h;
      # Tells downstream caches (CDN, browser) to cache the response
      # for 4 hours
      add_header Cache-Control "public, max-age=14400";

      # Include a header with the cache status ("HIT"/"MISS"/"BYPASS")
      add_header X-Cache-Status $upstream_cache_status;

      # Inject a script file into the response (at the end of <head>)
      #sub_filter '</head>' '
#<script type="text/javascript" src="SCRIPT_URL" />
#</head>';
      #sub_filter_once on;
      #
      # sub_filter doesn't work if the response is compressed, so
      # indicate that we don't want a gzip response.
      # (make sure to have "gzip on" in your nginx.conf to compress
      # responses going to the client.)
      #proxy_set_header Accept-Encoding "";

      proxy_pass <ORIGIN_URL>;

    }
    location /_/ {
      #proxy_set_header Host <ORIGIN_HOST>;

      # Note the trailing slash - this will remove the underscore
      # from the path of the proxied request.
      proxy_pass <ORIGIN_URL>/;
    }
    
    # Any URLs for which you don't want to change cache functionality
    # (e.g. static files you're already serving with Cache-Control: public)
    # need their own location block with a proxy_pass.
    location /content/ {
      #proxy_set_header Host <ORIGIN_HOST>;
      proxy_pass <ORIGIN_URL>;
    }
    location /scripts/ {
      #proxy_set_header Host <ORIGIN_HOST>;
      proxy_pass <ORIGIN_URL>;
    }
  }

#}
